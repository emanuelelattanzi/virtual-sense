#ifndef __radio_native__
#define __radio_native__

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Warning ! this file is machine-generated by the infuser tool !
 * Do not try to edit it by hand (or do not complain afterwards :-)
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
#include "common/types.h"

// void javax.radio.Radio._waitForMessage()
void javax_radio_Radio_void__waitForMessage();

// byte[] javax.radio.Radio._readBytes()
void javax_radio_Radio_byte____readBytes();

// void javax.radio.Radio._init()
void javax_radio_Radio_void__init();

// byte javax.radio.Radio._getNumMessages()
void javax_radio_Radio_byte__getNumMessages();

// void javax.radio.Radio.setChannel(short)
void javax_radio_Radio_void_setChannel_short();

// short javax.radio.Radio.getMaxMessageLength()
void javax_radio_Radio_short_getMaxMessageLength();

// void javax.radio.Radio._broadcast(byte[])
void javax_radio_Radio_void__broadcast_byte__();

// boolean javax.radio.Radio._send(short, byte[])
void javax_radio_Radio_boolean__send_short_byte__();

void radio_native_handler(dj_global_id id)
{
	switch(id.entity_id)
	{
		case 0: javax_radio_Radio_void__waitForMessage(); break;
		case 1: javax_radio_Radio_byte____readBytes(); break;
		case 2: javax_radio_Radio_void__init(); break;
		case 3: javax_radio_Radio_byte__getNumMessages(); break;
		case 4: javax_radio_Radio_void_setChannel_short(); break;
		case 5: javax_radio_Radio_short_getMaxMessageLength(); break;
		case 11: javax_radio_Radio_void__broadcast_byte__(); break;
		case 13: javax_radio_Radio_boolean__send_short_byte__(); break;
	}
}

#endif

